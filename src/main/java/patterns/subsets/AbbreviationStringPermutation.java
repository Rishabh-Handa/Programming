package patterns.subsets;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * Given a word, write a function to generate all of its unique generalized abbreviations.
 *
 * Generalized abbreviation of a word can be generated by replacing each substring
 * of the word by the count of characters in the substring. Take the example of “ab”
 * which has four substrings: “”, “a”, “b”, and “ab”.
 * After replacing these substrings in the actual word by the count
 * of characters we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.
 *
 * Example 1:
 *
 * Input: "BAT"
 * Output: "BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"
 */
public class AbbreviationStringPermutation {
    public static void main(String[] args) {
        System.out.println(printAbbreviations("BAT"));
        System.out.println(printAbbreviations("code"));
        System.out.println(printAbbreviations("interaction"));
    }

    static class WordAbbreviation {
        int length;
        int count;
        String str;

        WordAbbreviation(int length, int count, String str) {
            this.length = length;
            this.count = count;
            this.str = str;
        }
    }

    private static List<String> printAbbreviations(String str) {
        List<String> result = new ArrayList<>();
        if (str == null) {
            return result;
        }

        Queue<WordAbbreviation> queue = new LinkedList<>();
        queue.offer(new WordAbbreviation(0, 0, ""));

        while (!queue.isEmpty()) {
            WordAbbreviation qWord = queue.poll();
            if(qWord.length == str.length()) {
                if(qWord.count > 0) {
                    qWord.str = qWord.str + qWord.count;
                }
                result.add(qWord.str);
            } else {
                queue.offer(new WordAbbreviation(qWord.length + 1, qWord.count + 1, qWord.str));
                if(qWord.count > 0) {
                    qWord.str += qWord.count;
                }
                qWord.str += str.charAt(qWord.length);
                queue.offer(new WordAbbreviation(qWord.length + 1, 0, qWord.str));
            }
        }
        return result;
    }
}
